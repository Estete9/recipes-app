require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe 'Recipes', type: :request do
  # This should return the minimal set of attributes required to create a valid
  # Recipe. As you add validations to Recipe, be sure to
  # adjust the attributes here as well.
  let(:user) { create(:user) }
  let(:recipe) { create(:recipe, user: user) }

  before do
    sign_in user
  end

  describe 'GET /recipes' do
    it 'renders the index template' do
      get recipes_path
      expect(response).to render_template(:index)
    end

    # Add more tests as needed
  end

  describe 'GET /recipes/:id' do
    it 'renders the show template' do
      get recipe_path(recipe)
      expect(response).to render_template(:show)
    end

    # Add more tests as needed
  end

  describe 'GET /recipes/new' do
    it 'renders the new template' do
      get new_recipe_path
      expect(response).to render_template(:new)
    end

    # Add more tests as needed
  end

  describe 'POST /recipes' do
    context 'with valid parameters' do
      it 'creates a new recipe' do
        expect do
          post recipes_path, params: { recipe: attributes_for(:recipe) }
        end.to change(Recipe, :count).by(1)
      end
    end

    context 'with invalid parameters' do
      it 'does not create a new recipe' do
        expect do
          post recipes_path, params: { recipe: { name: nil } }
        end.to_not change(Recipe, :count)
      end

      it 'renders the new template' do
        post recipes_path, params: { recipe: { name: nil } }
        expect(response).to render_template(:new)
      end
    end
  end

  describe 'DELETE /recipes/:id' do
    it 'destroys the requested recipe' do
      recipe_to_destroy = create(:recipe, user:)
      expect do
        delete recipe_path(recipe_to_destroy)
      end.to change(Recipe, :count).by(-1)
    end

    it 'redirects to the recipes list' do
      delete recipe_path(recipe)
      expect(response).to redirect_to(recipes_path)
    end
  end
end
